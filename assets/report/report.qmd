---
title: "nf-core/genomeassembler report"
author: "Niklas Schandry"
format: dashboard
editor: visual
nav-buttons:
      - icon: github
        href: https://github.com/nschan/genomeassembler
params:
  nanoq: "no"
  busco: "no"
  quast: "no"
  jellyfish: "no"
  merqury: "no"
---

```{r load libraries and functions}
#| message: false
#| output: false
#| include: false
library(tidyverse)
library(magrittr)
library(plotly)
list.files("functions", full.names = T, pattern = ".R") %>% 
  map(\(x) source(x))
theme_set(theme_bw(base_size = 14,
                   base_family = "Arial"))
theme_update(strip.background = element_blank(),
             axis.text.x = element_text(angle = 70, hjust = 1))
## Colors, these come from the khroma package ("muted")
### For <=9 stages:
color_scale_plots <- scale_color_manual(values = c("#CC6677", "#332288", "#DDCC77", "#117733", "#88CCEE", "#882255", "#44AA99", "#999933", "#AA4499"), na.value = "#DDDDDD")
fill_scale_plots <- scale_fill_manual(values = c("#CC6677", "#332288", "#DDCC77", "#117733", "#88CCEE", "#882255", "#44AA99", "#999933", "#AA4499"), na.value = "#DDDDDD")
data_base = "data/"
```

# About

This report displays the main information gathered from various QC steps.

# nanoq {.tabset}

::: {.content-visible unless-profile="nanoq"}
nanoq was not included in the pipeline run, no ONT reads were included.
:::

```{r nanoq read inputs}
#| eval: !expr params$nanoq == "yes"
#| include: false
#| message: false
#| output: false
nanoq_reports <- list.files(paste0(data_base, "nanoq"), 
                            pattern = "report.json",
                            full.names = T) %>% 
  map_dfr(\(x) read_nanoq(x))
```

```{r}
#| eval: !expr params$nanoq == "yes"
#| include: false
dir.create("nanoq_files")
for (i in 1:length(unique(nanoq_reports$sample))) {
paste0('```{r}\n
           #| title: "Nanoq read statistics"
           p <- nanoq_reports %>% 
           filter(stat %in% c("Median Length", "Longest", "Median Quality","Bases")) %>% 
           filter(sample == "', unique(nanoq_reports$sample)[i], '") %>% 
           mutate(stat=fct_relevel(stat,c("Bases","Longest","Median Length","Median Quality"))) %>% 
           ggplot(aes(x = sample, y = val)) +
           geom_line() +
           geom_point(size = 5, pch=21, aes(fill=stage)) +
           facet_wrap(~stat, scales = "free_y", ncol=2) +
           fill_scale_plots +
           scale_y_continuous(labels = function(x) format(x,scientific=-1,trim=T, digits = 3, drop0trailing=T), n.breaks = 4) +
           theme(axis.title.x = element_blank(),
                   axis.title.y = element_blank(),
                   legend.position = "none",
                   legend.title = element_blank(),
                   panel.grid.minor = element_blank())
       ggplotly(p)\n```') %>% 
    write_lines(glue::glue("nanoq_files/_{ unique(nanoq_reports$sample)[i] }_nanoq.Rmd"))
}
```

::: {.content-visible when-profile="nanoq"}

::: {.panel-tabset .flow}

```{r nanoq add subplots}
#| eval: !expr params$nanoq == "yes"
#| results: asis
for (i in 1:length(unique(nanoq_reports$sample))) {
  cat(paste0('## ', unique(nanoq_reports$sample)[i], '\n\n'),
      paste0('### { width = 30% }', '\n\n'),
      paste0('::: {.valuebox icon="magic" color="primary" title="Total bases sequenced"}','\n'),
      paste0(nanoq_reports %>% 
             filter(stat == "Bases") %>%
             filter(sample == unique(nanoq_reports$sample)[i],) %$%
             sum(val) %>% 
             format(scientific=-1,trim=T, digits = 3, drop0trailing=T),'\n'),
      paste0(':::', '\n\n'),
      paste0('::: {.valuebox icon="collection" color="secondary" title="Number of reads"}', '\n'),
      paste0(nanoq_reports %>% 
             filter(stat == "N Reads") %>% 
             filter(sample == unique(nanoq_reports$sample)[i]) %$%
             min(val) %>% 
             paste(" bases"), '\n'),
      paste0(':::', '\n\n'),
      paste0('::: {.valuebox icon="chevron-double-up" color="success" title="Longest read"}', '\n'),
      paste0(nanoq_reports %>% 
             filter(stat == "Longest") %>%
             filter(sample == unique(nanoq_reports$sample)[i]) %$%
             max(val) %>% 
             paste0(" bases"),'\n'),
      paste0(':::', '\n\n'),
      paste0('### ', '\n\n'),
      knitr::knit_child(glue::glue('nanoq_files/_{ unique(nanoq_reports$sample)[i] }_nanoq.Rmd'),
                        envir = globalenv(),
                        quiet = TRUE),
      paste0('\n\n'),
      sep = ""
      )
}
```

```{r}
#| eval: !expr params$nanoq == "yes"
unlink("nanoq_files", recursive = T)
```

:::

:::

# QUAST {.tabset}

::: {.content-visible unless-profile="quast"}
QUAST was not included in the pipeline run.
:::

::: {.content-visible when-profile="quast"}
QUAST reports assembly statistics, taking into account the reference, if provided.

```{r message = F}
#| eval: !expr params$quast == "yes"
quast_stats <- list.files(paste0(data_base, "quast"),
                          pattern = "report.tsv",
                          full.names = T) %>%
  map_dfr(\(x) read_quast_report(x)) %>%
  mutate(
    sample = str_extract(
      assembly,
      ".+?(?=_assemble|\\.assembly|\\.asm|_medaka|_pilon|_links|\\.tigmint)"
    ),
    stage = case_when(
      str_detect(assembly, "_ragtag") ~ "RagTag",
      str_detect(assembly, "_medaka") ~ "medaka",
      str_detect(assembly, "_pilon") ~ "pilon",
      str_detect(assembly, "\\.longstitch") ~ "longstitch",
      str_detect(assembly, "_links") ~ "LINKS",
      str_detect(assembly, "\\.assembly|asm") ~ "Assembly",
      TRUE ~ "Unknown"
    )
  )
```


```{r quast write length plots}
#| eval: !expr params$quast == "yes"
#| include: false
dir.create("quast_files")
dir.create("quast_files/length")
for (i in 1:length(unique(quast_stats$sample))) {
paste0('```{r}\n
           p <- quast_stats %>% 
           filter(sample == "', unique(quast_stats$sample)[i], '") %>%
  filter(str_detect(stat, "[L].*[59]0")) %>% 
  mutate(stat = fct_relevel(stat, "L50","L90","LG50","LG90")) %>% 
  ggplot(aes(x=stat, y=value)) +
  geom_point(aes(fill = stage), 
             size = 5,
             pch = 21,
             alpha = 0.8,
             position = position_dodge(width = 0.4)) +
  facet_wrap(~ sample, scales = "free_y") +
  fill_scale_plots +
  labs(title = "QUAST: L(G) 50 and 90") +
  theme(panel.border = element_rect(fill = NA))
  ggplotly(p) \n```') %>% 
    write_lines(glue::glue("quast_files/length/_{ unique(quast_stats$sample)[i] }_quast.Rmd"))
}
```

```{r quast contig plots}
#| eval: !expr params$quast == "yes"
#| include: false
dir.create("quast_files/contigs")
for (i in 1:length(unique(quast_stats$sample))) {
paste0('```{r}\n
  p <- quast_stats %>% 
  filter(sample == "', unique(quast_stats$sample)[i], '") %>%
  filter(str_detect(stat, "# contigs \\\\(")) %>%
  filter(!str_detect(stat, ">= 0")) %>% 
  mutate(stat = stat %>% str_remove_all("# contigs ") %>% str_remove_all("[()]") %>% fct_inorder()) %>% 
  ggplot(aes(x=stat, y=value)) +
  geom_point(aes(fill = stage), 
             size = 5,
             pch = 21,
             alpha = 0.8,
             position = position_dodge(width = 0.4)) +
  facet_wrap(~ sample, scales = "free_y") +
  fill_scale_plots +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(title = "QUAST: Number of contigs by size") 
ggplotly(p)
  p <- quast_stats %>%
  filter(sample == "', unique(quast_stats$sample)[i], '") %>%
  filter(str_detect(stat, "Total length")) %>%
  filter(!str_detect(stat, ">= 0")) %>%
  mutate(stat = stat %>% str_remove_all("Total length ") %>% str_remove_all("[()]") %>% fct_inorder()) %>%
  ggplot(aes(x = stat, y = value)) +
  geom_point(
    aes(fill = stage),
    size = 5,
    pch = 21,
    height = 0,
    width = 0.2,
    alpha = 0.8,
    position = position_dodge(width = 0.4)
  ) +
  facet_wrap( ~ sample, scales = "free_y") +
  fill_scale_plots +
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank()) +
  labs(title = "QUAST: Aggregated length") +
  scale_y_continuous(
    labels = function(x)
      format(
        x,
        scientific = -1,
        trim = T,
        digits = 3,
        drop0trailing = T
      )
  )
ggplotly(p)
  \n```') %>% 
    write_lines(glue::glue("quast_files/contigs/_{ unique(quast_stats$sample)[i] }_quast.Rmd"))
}
```

::: {.panel-tabset .flow}

```{r quast add length subplots}
#| eval: !expr params$quast == "yes"
#| results: asis
for (i in 1:length(unique(quast_stats$sample))) {
  cat(paste0('## ', unique(quast_stats$sample)[i], '\n'),
      paste0('### { width = 30% }\n\n'),
      paste0('::: {.valuebox icon="arrow-up-right-circle" color="primary" title="Total length"}\n'),
      quast_stats %>%
          filter(sample == unique(quast_stats$sample)[i]) %>% 
          filter(stat == "Total length (>= 0 bp)") %$%
          max(value) %>%
          format(
          scientific = -1,
          trim = T,
          digits = 3,
          drop0trailing = T
          ) %>%
          paste("bp"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n\n'),
      paste0('::: {.valuebox icon="percent" color="success" title="GC Content"}\n'),
      quast_stats %>% 
        filter(sample == unique(quast_stats$sample)[i]) %>% 
        filter(stat == "GC (%)") %$%
        mean(value) %>%
        round(2) %>% 
        paste(" %"),
      paste0('\n'),
      paste0(':::'),
      paste0('\n\n'),
      paste0('::: {.valuebox icon="emoji-heart-eyes" color="info" title="Lowest L90"}\n'),
      quast_stats %>% 
        filter(sample == unique(quast_stats$sample)[i]) %>% 
        filter(stat == "L90") %>% 
        filter(value == min(value)) %>% 
        unique() %$% 
        glue::glue("{unique(value)}, at stage(s): {paste(stage, collapse = ', ')}"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n\n'),
      paste0('### Plots \n\n'),
      knitr::knit_child(glue::glue('quast_files/length/_{ unique(quast_stats$sample)[i] }_quast.Rmd'),
                        envir = globalenv(),
                       quiet = TRUE),
      paste0('\n\n\n'), 
      knitr::knit_child(glue::glue('quast_files/contigs/_{ unique(quast_stats$sample)[i] }_quast.Rmd'),
                        envir = globalenv(),
                        quiet = TRUE),
      paste0('\n\n\n'), 
      sep = "")
}
```

```{r unlink quast}
#| eval: !expr params$quast == "yes"
unlink("quast_files/contigs", recursive = T)
unlink("quast_files/length", recursive = T)
write_csv(quast_stats,"quast_files/reports.csv")
```
:::
:::

# BUSCO 

::: {.content-visible unless-profile="busco"}
BUSCO was not included in the pipeline run.
:::


```{r}
#| eval: !expr params$busco == "yes"
#| warning: false
#| message: false
#| echo: false
busco_reports <- list.files(paste0(data_base, "busco"),
                            full.names = T,
                            pattern = "short_summary") %>%
  map_dfr(\(x) read_busco_report(x)) %>%
  mutate(
    sample = str_extract(
      assembly,
      ".+?(?=_assemble|\\.assembly|\\.asm|_medaka|_pilon|_links|\\.tigmint)"
    ),
    stage = case_when(
      str_detect(assembly, "_ragtag") ~ "RagTag",
      str_detect(assembly, "_medaka") ~ "medaka",
      str_detect(assembly, "_pilon") ~ "pilon",
      str_detect(assembly, "\\.longstitch") ~ "longstitch",
      str_detect(assembly, "_links") ~ "LINKS",
      str_detect(assembly, "\\.assembly|\\.asm") ~ "Assembly",
      TRUE ~ "Unknown"
    )
  )
```

```{r}
#| eval: !expr params$busco == "yes"
#| include: false
dir.create("busco_files")
dir.create("busco_files/orthologs")
for (i in 1:length(unique(busco_reports$sample))) {
paste0('```{r}\n
           p <- busco_reports %>%
           filter(sample == "', unique(busco_reports$sample)[i], '") %>%
  filter(!is.na(BUSCO)) %>% 
  ggplot(aes(y = percent, x = BUSCO)) +
  geom_point(
    aes(fill = stage),
    size = 6,
    pch = 21,
    height = 0,
    alpha = 0.8,
    position = position_dodge(width = 0.4)
  ) +
  facet_wrap( ~ sample, nrow = 3) +
  fill_scale_plots +
  labs(y = "% of Single Copy Orthologs",
       title = "BUSCO: Conserved Orthologs") +
  coord_cartesian(clip = "on") +
  theme(
    panel.border = element_rect(fill = NA),
    legend.position = "bottom",
    axis.title.y = element_text(angle = 90),
    axis.title.x = element_blank()
  )
  ggplotly(p)
  \n```') %>% 
    write_lines(glue::glue("busco_files/orthologs/_{ unique(busco_reports$sample)[i] }_orthologs.Rmd"))
}
```

::: {.content-visible when-profile="busco"}
BUSCO assess assembly quality based on the presence / absence of expected single-copy orthologs.

::: {.panel-tabset .flow}

```{r busco orthologs add subplots and valueboxes}
#| eval: !expr params$busco == "yes"
#| results: asis
for (i in 1:length(unique(busco_reports$sample))) {
    cur_sample <-  unique(busco_reports$sample)[i]
  completeness_val <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Complete") %>% 
    filter(percent == max(percent)) %$%
    percent %>% 
    unique()
  completeness_stage  <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Complete") %>% 
    filter(percent == max(percent)) %$%
    stage
  frag_val <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Fragmented") %>% 
    filter(percent == max(percent)) %$%
    percent %>% 
    unique()
  frag_stage  <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Fragmented") %>% 
    filter(percent == max(percent)) %$%
    stage
  missing_val <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Missing") %>% 
    filter(percent == max(percent)) %$%
    percent %>% 
    unique()
  missing_stage  <-  busco_reports %>% 
    filter(sample == cur_sample) %>% 
    filter(BUSCO == "Missing") %>% 
    filter(percent == max(percent)) %$%
    stage
  cat(paste('## ', unique(busco_reports$sample)[i]),
      paste0('\n\n'),
      paste0('### {.fill} \n\n'),
      paste0('::: {.valuebox icon="percent" color="success" title="Max. BUSCO Completeness" }\n'),
      paste0('\n'),
      glue::glue("{unique(completeness_val)}%,\nat stage(s): {paste(unique(completeness_stage), collapse = ', ')}"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n'),
      paste0('::: {.valuebox icon="heartbreak" color="warning" title="Max. BUSCO Fragmented"}\n'),
      glue::glue("{unique(frag_val)}%,\nat stage(s): {paste(unique(frag_stage), collapse = ', ')}"),
      paste0('\n'),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n'),
      paste0('::: {.valuebox icon="person-walking" color="danger" title="Max. BUSCOs Missing"}\n'),
      glue::glue("{unique(missing_val)}%, at stage(s): {paste(unique(missing_stage), collapse = ', ')}"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n\n'),
      paste('### { .flow }'),
      paste0('\n\n'),
      knitr::knit_child(glue::glue('busco_files/orthologs/_{ unique(busco_reports$sample)[i] }_orthologs.Rmd'), 
                        envir = globalenv(), 
                        quiet = TRUE),
      paste0('\n\n\n'),
      sep = "")
}
```

:::

:::

```{r}
#| eval: !expr params$busco == "yes"
unlink("busco_files/orthologs", recursive = T)
```

```{r}
#| eval: !expr params$busco == "yes"
write_csv(busco_reports,"busco_files/reports.csv")
```


# genomescope

::: {.content-visible unless-profile="jellyfish"}
jellyfish / genomescope was not included in the pipeline run.
:::



```{r}
#| eval: !expr params$jellyfish == "yes"
#| message: false
#| echo: false
#| output: false
#| warning: false
genomescope_out <- list.files(paste0(data_base, "genomescope"), full.names = T, pattern = "genomescope.txt") %>% 
  map_dfr(\(x) read_genomescope(x))
```

::: {.content-visible when-profile="jellyfish"}

Jellyfish and genomescope are used to infer genome size from the initial ONT reads.

```{r}
#| eval: !expr params$jellyfish == "yes"
#| output: asis
img_files <- list.files(paste0(data_base,"genomescope"), full.names = T, pattern = "plot.png")
dir.create("genomescope_files")
for (file in img_files) {
  file.copy(from = file,
            to   = paste0("genomescope_files/", file %>% basename(), sep =""))
  
}
img_files <- list.files("genomescope_files", full.names = T, pattern = "plot.png")

cat(":::{.panel-tabset}\n",
    glue::glue('## <<str_extract(img_files %>% basename(), ".+?(?=_plot.png)")>>\n ![](<<img_files>>){width=50% fig-align="centre"}\n\n\n', .open = "<<", .close = ">>"),
    ":::\n",
    sep = ""
)
```
:::

# merqury 

::: {.content-visible unless-profile="merqury"}
meryl and merqury were not included in the pipeline run.
:::

```{r}
#| eval: !expr params$merqury == "yes"
#| include: false
#| message: false
#| output: false
merqury_stats <- list.files(paste0(data_base, "merqury"), full.names = T, pattern = "stats") %>% 
  lapply(\(x) read_tsv(x, col_names = c("sample_stage","all","assembly","total","percent"), show_col_types = FALSE)) %>% 
  bind_rows() %>% 
  mutate(sample = str_extract(sample_stage,".+?(?=_assemble|\\.assembly|\\.asm|_medaka|_pilon|_links|\\.tigmint)"),
         stage = case_when(
                  str_detect(sample_stage, "_ragtag") ~ "RagTag",
                  str_detect(sample_stage, "_medaka") ~ "medaka",
                  str_detect(sample_stage, "_pilon") ~ "pilon",
                  str_detect(sample_stage, "\\.longstitch") ~ "longstitch",
                  str_detect(sample_stage, "_links") ~ "LINKS",
                  str_detect(sample_stage, "\\.assembly|\\.asm") ~ "Assembly",
                  TRUE ~ "Unknown"))
merqury_asm_hists <- list.files(paste0(data_base, "/merqury"), full.names = T, pattern = "asm.hist")  %>% 
  lapply(\(x) read_tsv(x, col_names = T, show_col_types = FALSE) %>% 
           mutate(
             sample = str_extract(x %>% basename(), ".+?(?=_assemble|\\.assembly|\\.asm|_medaka|_polish|_links|_run|\\.spectra)"),
             stage = case_when(
               str_detect(x, "_ragtag") ~ "RagTag",
               str_detect(x, "_medaka") ~ "medaka",
               str_detect(x, "_pilon") ~ "pilon",
               str_detect(x, ".longstitch") ~ "longstitch",
               str_detect(x, "_links") ~ "LINKS",
               str_detect(x, "_assemble|\\.asm") ~ "Assembly",
               TRUE ~ "Unknown"),
              Assembly = as.factor(Assembly),
              stage = as.factor(stage),
              sample = as.factor(sample),
              kmer_multiplicity = as.integer(kmer_multiplicity),
              Count = as.integer(Count))
           ) %>% 
  bind_rows()

merqury_cn_hists <- list.files(paste0(data_base, "merqury"), full.names = T, pattern = "cn.hist")  %>% 
  lapply(\(x) read_tsv(x, col_names = T, show_col_types = FALSE) %>% 
           mutate(
             sample = str_extract(x %>% basename(), ".+?(?=_assemble|\\.assembly|\\.asm|_medaka|_polish|_links|_run|\\.spectra)"),
             stage = case_when(
               str_detect(x, "_ragtag") ~ "RagTag",
               str_detect(x, "_medaka") ~ "medaka",
               str_detect(x, "_pilon") ~ "pilon",
               str_detect(x, ".longstitch") ~ "longstitch",
               str_detect(x, "_links") ~ "LINKS",
               str_detect(x, "_assemble|\\.asm") ~ "Assembly",
               TRUE ~ "Unknown"),
              Copies = as.factor(Copies),
              stage = as.factor(stage),
              sample = as.factor(sample),
              kmer_multiplicity = as.integer(kmer_multiplicity),
              Count = as.integer(Count))
           ) %>% 
  bind_rows()
```

```{r}
#| eval: !expr params$merqury == "yes"
#| include: false
dir.create("merqury_files")
dir.create("merqury_files/stat_plots/")
for (i in 1:length(unique(merqury_stats$sample))) {
  cur_sample <- unique(merqury_stats$sample)[i]
  paste0('```{r}
p <- merqury_stats %>% 
        plot_merqury_stats("', cur_sample,'") 
ggplotly(p)\n```') %>% 
    write_lines(glue::glue("merqury_files/stat_plots/_{ cur_sample }_completeness_plt.Rmd"))
}
```

```{r}
#| eval: !expr params$merqury == "yes"
#| include: false
dir.create("merqury_files/asm_plots/")
for (i in 1:length(unique(merqury_asm_hists$sample))) {
  cur_sample <- unique(merqury_asm_hists$sample)[i]
  paste0('```{r}
p <- merqury_asm_hists %>% 
        plot_merqury_multiplicity("', cur_sample,'") 
ggplotly(p)\n```') %>% 
    write_lines(glue::glue("merqury_files/asm_plots/_{ cur_sample }_asm_plts.Rmd"))
}
```

```{r}
#| eval: !expr params$merqury == "yes"
#| include: false
dir.create("merqury_files/cn_plots/")
for (i in 1:length(unique(merqury_cn_hists$sample))) {
  cur_sample <- unique(merqury_cn_hists$sample)[i]
  paste0('```{r}
p <- merqury_cn_hists %>% 
         plot_merqury_copynumber("', cur_sample,'") 
ggplotly(p)\n```') %>% 
    write_lines(glue::glue("merqury_files/cn_plots/_{ cur_sample }_cn_plts.Rmd"))
}
```

:::: {.content-visible when-profile="merqury"  }

merqury compares k-mer spectra between assemblies and short read libraries to assess assembly quality and completeness.

:::  {.panel-tabset}

```{r merqury add plots and valueboxes}
#| eval: !expr params$merqury == "yes"
#| results: asis
for (i in 1:length(unique(merqury_stats$sample))) {
    cur_sample <-  unique(merqury_stats$sample)[i]
  highest_val <-  merqury_stats %>% 
    filter(sample == cur_sample) %>% 
    filter(percent == max(percent)) %$% 
    percent %>% 
    unique() 
  highest_stage  <-  merqury_stats %>% 
    filter(sample == cur_sample) %>% 
    filter(percent == highest_val) %$%
    stage %>% 
    unique()
  lowest_val <-  merqury_stats %>% 
    filter(sample == cur_sample) %>% 
    filter(percent == min(percent)) %$% 
    percent %>% 
    unique() 
  lowest_stage  <-  merqury_stats %>% 
    filter(sample == cur_sample) %>% 
    filter(percent == lowest_val) %$%
    stage %>% 
    unique()
  img_files <- list.files(paste0(data_base,"merqury"), full.names = T, pattern = "spectra-cn.fl.png")  %>% 
    .[str_detect(., cur_sample)]
    
  cat(paste('## ', cur_sample),
      paste0('\n\n'),
      paste0('### { orientation="columns" .float } \n'),
      paste0('::: {.valuebox icon="percent" color="success" title="Highest k-mer completeness" }\n'),
      glue::glue("{unique(highest_val) %>% round(2)}%, at stage(s): {paste(highest_stage, collapse = ', ')}"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n\n'),
      paste0('::: {.valuebox icon="heartbreak" color="warning" title="Lowest k-mer completeness" }\n'),
      glue::glue("{unique(lowest_val) %>% round(2)}%, at stage(s): {paste(lowest_stage, collapse = ', ')}"),
      paste0('\n'),
      paste0(':::'), 
      paste0('\n\n'),
      paste0('::: {.panel-tabset}'),
      paste0('\n\n'),
      paste0('### Completeness \n'),
      paste0('\n'),
      knitr::knit_child(glue::glue('merqury_files/stat_plots/_{ cur_sample }_completeness_plt.Rmd'), 
                  envir = globalenv(), 
                  quiet = TRUE),
      paste0('\n'),
      paste0('### Spectra \n'),
      paste0('\n'),
      knitr::knit_child(glue::glue('merqury_files/asm_plots/_{ cur_sample }_asm_plts.Rmd'), 
                  envir = globalenv(), 
                  quiet = TRUE),
      paste0('\n'),
      paste0('### Copy Number \n'),
      paste0('\n'),
      knitr::knit_child(glue::glue('merqury_files/cn_plots/_{ cur_sample }_cn_plts.Rmd'),
                  envir = globalenv(),
                  quiet = TRUE),
      paste0('\n\n\n'),
      paste0(':::\n'),
      sep = "")
}
```
:::

::::

```{r}
#| eval: !expr params$merqury == "yes"
unlink("merqury_files/cn_plots")
unlink("merqury_files/asm_plots")
unlink("merqury_files")
```
