/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running full-size tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a full size pipeline test.

    Use as follows:
        nextflow run nf-core/genomeassembler -profile test_full,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

process {
withName: '.*:ASSEMBLE:.*:BUSCO' {
        ext.prefix = { "${meta.id}_assembly-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/assemble" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*PILON:.*:BUSCO' {
        ext.prefix = { "${meta.id}_pilon-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/pilon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*MEDAKA:.*:BUSCO' {
        ext.prefix = { "${meta.id}_medaka-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*LINKS:.*:BUSCO' {
        ext.prefix = { "${meta.id}_links-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/links" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*LONGSTITCH:.*:BUSCO' {
        ext.prefix = { "${meta.id}_longstitch-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/longstitch" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // avoid catching ragtag from ont_on_hifi assembly
    withName: '.*:SCAFFOLD:.*RAGTAG:.*:BUSCO' {
        ext.prefix = { "${meta.id}_ragtag-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/QC/BUSCO/ragtag" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

params {
    config_profile_name        = 'Full test profile'
    config_profile_description = 'Full test dataset to check pipeline function'

    input = 'https://raw.githubusercontent.com/nf-core/test-datasets/genomeassembler/samplesheet/full_test_samplesheet.csv'
    ont = true
    hifi = true
    quast = true
    busco = true // needs DB
    jellyfish = true
    genome_size = 2000000
    assembler = "flye_on_hifiasm"
    polish_medaka = true
    polish_pilon = true
    scaffold_links = true
    scaffold_longstitch = true
    scaffold_ragtag = true
    short_reads = true
    merqury = true
}
