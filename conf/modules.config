/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    /* 
    ----------
    ASSEMBLY
    ----------
    */
    // FLYE: Here I can switch to nf-core/flye
    withName: FLYE {
        ext.ags = [
            "--genome-size ${params.genome_size}",
            params.flye_args
        ]
        .join(" ")
        .trim(  )
    publishDir = [
        path: { "${params.outdir}/assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // HIFIASM:
    /* Don't think I should switch to nf-core 
       here since the UL process takes more inputs */
    withName: 'HIFIASM.*' {
        ext.args = [ params.hifiasm_args ]
        publishDir = [
            path: { "${params.outdir}/assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /* 
    ----------
    QC
    ----------
    */
    // BUSCO: switch to nf-core
    withName: BUSCO {
        // Subworkflow: "${task.process.tokenize(':')[-3].toLowerCase()}"
        ext.prefix = '"${meta.id}"-"${task.process}.tokenize(":")[-3].toLowerCase()"-"${lineage}"'
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // QUAST: Prefer to keep the local module since it can deal with the inputs I have
    withName: QUAST {
        ext.prefix = '"${meta.id}"-"${task.process}.tokenize(":")[-3].toLowerCase()"'
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // MERQURY: use nf-core module
    withName: MERQURY {
        ext.prefix = '"${meta.id}"-"${task.process}.tokenize(":")[-3].toLowerCase()"'
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    /* 
    ----------
    Polishing
    ----------
    */
    // Medaka: switch to nf-core
    withName: MEDAKA {
        ext.args = [ params.medaka_model ? "--model ${params.medaka_model}" : '' ]
        ext.prefix = '"${meta.id}_medaka"'
        publishDir = [
            path: { "${params.outdir}/polishing/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // Pilon: switch to nf-core
    withName: PILON {
        publishDir = [
            path: { "${params.outdir}/polishing/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }

}
