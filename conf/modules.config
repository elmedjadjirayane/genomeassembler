/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // withName: SAMPLESHEET_CHECK {
    //     publishDir = [
    //         path: { "${params.outdir}/pipeline_info" },
    //         mode: params.publish_dir_mode,
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // BUILD_KMER_DATABASES
    withName: 'FASTK_FASTK' {
        scratch    = false  // Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.args   = { "-t1 -k${meta.kmer_size?: params.kmer_size}" }
    }
    withName: 'FASTK_MERGE' {
        scratch    = false  // Disable scratch to get around bug https://github.com/nextflow-io/nextflow/issues/2983
        ext.prefix = { "${meta.id}_merged" }
    }
    withName: '.*:BUILD_HIFI_FASTK_DATABASE:FASTK_FASTK' {
        ext.prefix = { "${meta.id}_${reads[0].baseName}_hifi" }
    }
    withName: '.*:BUILD_HIC_FASTK_DATABASE:FASTK_FASTK' {
        ext.prefix = { "${meta.id}_${reads[0].baseName}_hic" }
    }
    if( params.enable_ont_kmer_analyses ){
        withName: '.*:BUILD_ONT_FASTK_DATABASE:FASTK_FASTK' {
            ext.prefix = { "${meta.id}_${reads[0].baseName}_ont" }
        }
    }
    withName: '.*:BUILD_ILLUMINA_FASTK_DATABASE:FASTK_FASTK' {
        ext.prefix = { "${meta.id}_${reads[0].baseName}_illumina" }
    }

    withName: 'MERYL_.*' {
        ext.args = { "k=${meta.kmer_size?: params.kmer_size}" }
    }

    withName: 'NANOPLOT' {
        publishDir = [
            path: { "$params.outdir/data_properties/nanoplot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // GENOME PROPERTIES
    withName: 'FASTK_HISTEX' {
        ext.args   = "-G"
        ext.prefix = { "${meta.id}_histex" }
    }
    withName: 'GENOMESCOPE2' {
        ext.args   = { [
            "-k=${meta.kmer_size?: params.kmer_size}",
            "-p=${meta.ploidy?: params.ploidy}"
        ].join(' ') }
        // Can move to subdir based on task.process
        publishDir = [
            path: { "$params.outdir/genome_properties/genomescope2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GENESCOPEFK' {
        ext.args   = { [
            "--kmer_length ${meta.kmer_size?: params.kmer_size}",
            "--ploidy ${meta.ploidy?: params.ploidy}"
        ].join(' ') }
        publishDir = [
            path: { "$params.outdir/genome_properties/genescopefk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_PLOIDYPLOT' {
        publishDir = [
            path: { "$params.outdir/genome_properties/ploidyplot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MERQURYFK_KATGC' {
        publishDir = [
            path: { "$params.outdir/genome_properties/katgc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // COMPARE_LIBRARIES
    // withName: 'MERQURYFK_KATCOMP' {
    //     publishDir = [
    //         path: { "$params.outdir/library_comparison/kat_comp" },
    //         mode: params.publish_dir_mode,
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

    // CONTAMINATION SCREEN
    withName: 'MASH_SCREEN' {
        ext.args   = '-w'
        ext.prefix = { "${meta.id}_${query.baseName}" }
        publishDir = [
            path: { "$params.outdir/contamination_screen/mash_screen/screens" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MASH_FILTER' {
        // Filter hits with greater than 90% identity and greater than 100 shared hashes
        ext.args   = "-F '[\\t/]' '\$1 > 0.9 && \$2 > 100'"
        publishDir = [
            path: { "$params.outdir/contamination_screen/mash_screen" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // COMPARE_ASSEMBLIES
    withName: 'QUAST' {
        cpus       = { Math.min(6, consensus instanceof List ? consensus.size() : 1 ) }
        publishDir = [
            path: { "$params.outdir/assembly_comparison/quast" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EVALUATE_ASSEMBLY
    withName: 'MERQURY' {
        tag        = { meta.build }
        ext.prefix = { meta.build }
        publishDir = [
            path: { "$params.outdir/assembly_evaluation/merqury/$meta.build" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MERQURYFK_MERQURYFK' {
        tag        = { meta.build }
        ext.prefix = { meta.build }
        publishDir = [
            path: { "$params.outdir/assembly_evaluation/merquryfk/$meta.build" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BUSCO' {
        tag        = { meta.build }
        ext.prefix = { meta.build }
        ext.args   = '--mode genome'
        publishDir = [
            path: { "$params.outdir/assembly_evaluation/busco/$meta.build" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
