/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    // QC tools generally need to be placed into the correct sub-sub, but RAGTAG needs to be in correct sub.
    // ${task.process.tokenize(':')[-3].toLowerCase()} -> Gets the current sub-sub workflow (e.g. POLISH_PILON and not POLISH)
    // ${task.process.tokenize(':')[2].toLowerCase()} -> Gets the current sub workflow (e.g. POLISH and not POLISH_PILON)
    /* 
    ----------
    Reads in
    ONT
    ----------
    */
    // nanoq: local module
    withName: NANOQ {
        publishDir = [
            path: { "${params.outdir}/ont_reads/nanoq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // only local module
    withName: COLLECT {
        publishDir = [
            path: { "${params.outdir}/ont_reads/collect" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // porechop: nf-core module
    withName: PORECHOP {
        publishDir = [
            path: { "${params.outdir}/ont_reads/porechop" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // Genomescope / jellyfish: local modules
    withName: COUNT {
        publishDir = [
            path: { "${params.outdir}/ont_reads/genomescope/jellyfish/count/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DUMP {
        publishDir = [
            path: { "${params.outdir}/ont_reads/genomescope/jellyfish/dump/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: STATS {
        publishDir = [
            path: { "${params.outdir}/ont_reads/genomescope/jellyfish/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HISTO {
        publishDir = [
            path: { "${params.outdir}/ont_reads/genomescope/jellyfish/histo/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GENOMESCOPE {
        publishDir = [
            path: { "${params.outdir}/ont_reads/genomescope/genomescope/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /* 
    ----------
    Reads in
    HiFi
    all nf-core
    ----------
    */
    withName: LIMA {
        publishDir = [
            path: { "${params.outdir}/hifi_reads/lima" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: TO_FASTQ {
        publishDir = [
            path: { "${params.outdir}/hifi_reads/lima/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /* 
    ----------
    Reads in
    Short reads
    all nf-core
    ----------
    */
    withName: TRIMGALORE {
        publishDir = [
            path: { "${params.outdir}/short_reads/trimgalore" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MERYL_COUNT {
        publishDir = [
            path: { "${params.outdir}/short_reads/meryl/count/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MERYL_UNIONSUM {
        publishDir = [
            path: { "${params.outdir}/short_reads/meryl/unionsum/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /* 
    ----------
    ASSEMBLY
    ----------
    */
    // FLYE: nf-core
    withName: FLYE {
        ext.args = [
            params.genome_size ? "--genome-size ${params.genome_size}" : '',
            params.flye_args
        ]
            .join(" ")
            .trim(  )
        publishDir = [
            path: { "${params.outdir}/assemble/flye/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // HIFIASM:
    /* Don't think I should switch to nf-core 
       here since the UL process takes more inputs */
    withName: 'HIFIASM.*' {
        ext.args = [ params.hifiasm_args ]
        publishDir = [
            path: { "${params.outdir}/assemble/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /* 
    ----------
    QC
    ----------
    */
    // BUSCO: nf-core
    withName: BUSCO {
        // Subworkflow: "${task.process.tokenize(':')[-3].toLowerCase()}"
        ext.prefix = { "${meta.id}-${task.process.tokenize(':')[-3].toLowerCase()}-${lineage}" }
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/busco" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }

    // QUAST: Prefer to keep the local module since it can deal with the inputs I have
    withName: QUAST {
        ext.prefix = { "${meta.id}_${task.process.tokenize(':')[-3].toLowerCase()}" }
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/quast/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // QUAST related mapping
    // these are all local
    withName: 'MAP_TO_REF.*' {
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/quast/${meta.id}/map_to_ref/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // QUAST related mapping
    withName: 'MAP_TO_ASSEMBLY.*' {
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/quast/${meta.id}/map_to_assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // MERQURY: nf-core 
    withName: MERQURY {
        ext.prefix = { "${meta.id}-${task.process.tokenize(':')[-3].toLowerCase()}" }
        publishDir = [
            path: { "${params.outdir}/QC/${task.process.tokenize(':')[-3].toLowerCase()}/merqury/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }

    /* 
    ----------
    Polishing
    ----------
    */
    // Medaka: nf-core
    withName: MEDAKA {
        ext.args = [ params.medaka_model ? "--model ${params.medaka_model}" : '' ]
        ext.prefix = { "${meta.id}_medaka" }
        publishDir = [
            path: { "${params.outdir}/polishing/medaka" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // Pilon: nf-core
    withName: PILON {
        publishDir = [
            path: { "${params.outdir}/polishing/pilon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    // Pilon mapping
    withName: MAP_SR {
        publishDir = [
            path: { "${params.outdir}/polishing/pilon/map_shortreads/${meta.id}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    /* 
    ----------
    Scaffolding
    None of the tools used has a core module.
    ----------
    */
    // RagTag 
    // make sure to handle the case where ragtag is part of the assembly here.
    withName: RAGTAG_SCAFFOLD {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[2].toLowerCase()}/ragtag" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    withName: LINKS {
        publishDir = [
            path: { "${params.outdir}/scaffold/links/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    withName: LONGSTITCH {
        publishDir = [
            path: { "${params.outdir}/scaffold/longstitch/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
    /*
    --------
    Liftoff
    keep local module
    --------
    */
    withName: LIFTOFF {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-3].toLowerCase()}/liftoff/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }

    /*
    --------
    Report
    */
    withName: REPORT {
        publishDir = [
            path: { "${params.outdir}/report/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }            
        ]
    }
}
